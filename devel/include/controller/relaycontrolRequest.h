// Generated by gencpp from file controller/relaycontrolRequest.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_RELAYCONTROLREQUEST_H
#define CONTROLLER_MESSAGE_RELAYCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct relaycontrolRequest_
{
  typedef relaycontrolRequest_<ContainerAllocator> Type;

  relaycontrolRequest_()
    : caller()
    , relay1(false)
    , relay2(false)  {
    }
  relaycontrolRequest_(const ContainerAllocator& _alloc)
    : caller(_alloc)
    , relay1(false)
    , relay2(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _caller_type;
  _caller_type caller;

   typedef uint8_t _relay1_type;
  _relay1_type relay1;

   typedef uint8_t _relay2_type;
  _relay2_type relay2;





  typedef boost::shared_ptr< ::controller::relaycontrolRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::relaycontrolRequest_<ContainerAllocator> const> ConstPtr;

}; // struct relaycontrolRequest_

typedef ::controller::relaycontrolRequest_<std::allocator<void> > relaycontrolRequest;

typedef boost::shared_ptr< ::controller::relaycontrolRequest > relaycontrolRequestPtr;
typedef boost::shared_ptr< ::controller::relaycontrolRequest const> relaycontrolRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::relaycontrolRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::relaycontrolRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::relaycontrolRequest_<ContainerAllocator1> & lhs, const ::controller::relaycontrolRequest_<ContainerAllocator2> & rhs)
{
  return lhs.caller == rhs.caller &&
    lhs.relay1 == rhs.relay1 &&
    lhs.relay2 == rhs.relay2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::relaycontrolRequest_<ContainerAllocator1> & lhs, const ::controller::relaycontrolRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller::relaycontrolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::relaycontrolRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::relaycontrolRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::relaycontrolRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::relaycontrolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::relaycontrolRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::relaycontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab9a67d1bdf7343eecc58306f636f770";
  }

  static const char* value(const ::controller::relaycontrolRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab9a67d1bdf7343eULL;
  static const uint64_t static_value2 = 0xecc58306f636f770ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::relaycontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/relaycontrolRequest";
  }

  static const char* value(const ::controller::relaycontrolRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::relaycontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string caller\n"
"bool relay1\n"
"bool relay2\n"
;
  }

  static const char* value(const ::controller::relaycontrolRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::relaycontrolRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.caller);
      stream.next(m.relay1);
      stream.next(m.relay2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct relaycontrolRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::relaycontrolRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::relaycontrolRequest_<ContainerAllocator>& v)
  {
    s << indent << "caller: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.caller);
    s << indent << "relay1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay1);
    s << indent << "relay2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relay2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_RELAYCONTROLREQUEST_H
