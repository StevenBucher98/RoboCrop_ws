// Generated by gencpp from file cartesian_control/test_srvResponse.msg
// DO NOT EDIT!


#ifndef CARTESIAN_CONTROL_MESSAGE_TEST_SRVRESPONSE_H
#define CARTESIAN_CONTROL_MESSAGE_TEST_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_control
{
template <class ContainerAllocator>
struct test_srvResponse_
{
  typedef test_srvResponse_<ContainerAllocator> Type;

  test_srvResponse_()
    : desc()
    , response(false)  {
    }
  test_srvResponse_(const ContainerAllocator& _alloc)
    : desc(_alloc)
    , response(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _desc_type;
  _desc_type desc;

   typedef uint8_t _response_type;
  _response_type response;





  typedef boost::shared_ptr< ::cartesian_control::test_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_control::test_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct test_srvResponse_

typedef ::cartesian_control::test_srvResponse_<std::allocator<void> > test_srvResponse;

typedef boost::shared_ptr< ::cartesian_control::test_srvResponse > test_srvResponsePtr;
typedef boost::shared_ptr< ::cartesian_control::test_srvResponse const> test_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_control::test_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_control::test_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_control::test_srvResponse_<ContainerAllocator1> & lhs, const ::cartesian_control::test_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.desc == rhs.desc &&
    lhs.response == rhs.response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_control::test_srvResponse_<ContainerAllocator1> & lhs, const ::cartesian_control::test_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_control::test_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_control::test_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_control::test_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a7ab05b8c54168563cc1cb286c04fa8";
  }

  static const char* value(const ::cartesian_control::test_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a7ab05b8c541685ULL;
  static const uint64_t static_value2 = 0x63cc1cb286c04fa8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_control/test_srvResponse";
  }

  static const char* value(const ::cartesian_control::test_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string desc\n"
"bool response\n"
"\n"
;
  }

  static const char* value(const ::cartesian_control::test_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desc);
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_control::test_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_control::test_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "desc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.desc);
    s << indent << "response: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_CONTROL_MESSAGE_TEST_SRVRESPONSE_H
